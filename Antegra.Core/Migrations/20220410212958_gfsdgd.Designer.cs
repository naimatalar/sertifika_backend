// <auto-generated />
using System;
using Labote.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Labote.Core.Migrations
{
    [DbContext(typeof(LaboteContext))]
    [Migration("20220410212958_gfsdgd")]
    partial class gfsdgd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Labote.Core.Entities.AnalisysCreateRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnalysisStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("LaboteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SampleAcceptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LaboteUserId");

                    b.HasIndex("SampleAcceptId");

                    b.ToTable("AnalisysCreateRecords");
                });

            modelBuilder.Entity("Labote.Core.Entities.AnalisysRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnalisysCreateRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AnalisysCreateRecordId");

                    b.ToTable("AnalisysRecords");
                });

            modelBuilder.Entity("Labote.Core.Entities.AnalisysRecordDeviceValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnalisysRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceResultValueTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SampleExaminationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnalisysRecordId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceResultValueTypeId");

                    b.HasIndex("SampleExaminationId");

                    b.ToTable("AnalisysRecordDeviceValues");
                });

            modelBuilder.Entity("Labote.Core.Entities.AnalisysRecordSampleExaminationResultValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnalisysRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("SampleExaminationResultValueTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnalisysRecordId");

                    b.HasIndex("SampleExaminationResultValueTypeId");

                    b.ToTable("AnalisysRecordSampleExaminationResultValues");
                });

            modelBuilder.Entity("Labote.Core.Entities.Chemical", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("Chemical");
                });

            modelBuilder.Entity("Labote.Core.Entities.CurrentCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LogoImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxAgency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurrentCustomers");
                });

            modelBuilder.Entity("Labote.Core.Entities.CurrentCustomerBankAccountInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankMerchant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrentCustomerId");

                    b.ToTable("CurrentCustomerBankAccountInfos");
                });

            modelBuilder.Entity("Labote.Core.Entities.CurrentCustomerContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MailAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailAddress3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentCustomerId");

                    b.ToTable("CurrentCustomerContactInfos");
                });

            modelBuilder.Entity("Labote.Core.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserTopicId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Labote.Core.Entities.DeviceResultValueSampleUnitReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MeasureUnitSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeasureUnitType")
                        .HasColumnType("int");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementUnitLongName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceResultValueSampleUnitReferences");
                });

            modelBuilder.Entity("Labote.Core.Entities.DeviceResultValueType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MeasureUnitSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeasureUnitType")
                        .HasColumnType("int");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementUnitLongName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceResultValueTypes");
                });

            modelBuilder.Entity("Labote.Core.Entities.Laboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserTopicId");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("Labote.Core.Entities.LaboratoryDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("LaboratoryDevices");
                });

            modelBuilder.Entity("Labote.Core.Entities.LaboratoryUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LaboteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LaboteUserId");

                    b.ToTable("LaboratoryUsers");
                });

            modelBuilder.Entity("Labote.Core.Entities.LaboteUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("NotDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserTopicId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Labote.Core.Entities.MenuModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainPage")
                        .HasColumnType("bit");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MenuModules");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleAccept", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ConfirmToGetLaboratoryUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveyToLaboratoeyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LaboteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SampleAcceptBringingType")
                        .HasColumnType("int");

                    b.Property<int>("SampleAcceptPackaging")
                        .HasColumnType("int");

                    b.Property<int>("SampleAcceptStatus")
                        .HasColumnType("int");

                    b.Property<string>("SampleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SampleReturnType")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmToGetLaboratoryUserId");

                    b.HasIndex("CurrentCustomerId");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LaboteUserId");

                    b.ToTable("SampleAccepts");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExamination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("UserTopicId");

                    b.ToTable("SampleExaminations");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExaminationDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("SampleExaminationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SampleExaminationId");

                    b.ToTable("SampleExaminationDevice");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExaminationPriceCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("SampleExaminationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SampleExaminationId");

                    b.ToTable("SampleExaminationPriceCurrencies");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExaminationResultValueType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MeasureUnitSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeasureUnitType")
                        .HasColumnType("int");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementUnitLongName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SampleExaminationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SampleExaminationId");

                    b.ToTable("SampleExaminationResultValueTypes");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExaminationSampleAccept", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("SampleAcceptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SampleExaminationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SampleAcceptId");

                    b.HasIndex("SampleExaminationId");

                    b.ToTable("SampleExaminationSampleAccepts");
                });

            modelBuilder.Entity("Labote.Core.Entities.UserMenuModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MenuModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenuModelId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserMenuModules");
                });

            modelBuilder.Entity("Labote.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("NotDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserTopicId");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Labote.Core.Entities.UserTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UserTopics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Labote.Core.Entities.AnalisysCreateRecord", b =>
                {
                    b.HasOne("Labote.Core.Entities.LaboteUser", "LaboteUser")
                        .WithMany("AnalisysRecords")
                        .HasForeignKey("LaboteUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.SampleAccept", "SampleAccept")
                        .WithMany("AnalisysCreateRecords")
                        .HasForeignKey("SampleAcceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaboteUser");

                    b.Navigation("SampleAccept");
                });

            modelBuilder.Entity("Labote.Core.Entities.AnalisysRecord", b =>
                {
                    b.HasOne("Labote.Core.Entities.AnalisysCreateRecord", "AnalisysCreateRecord")
                        .WithMany("AnalisysRecords")
                        .HasForeignKey("AnalisysCreateRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalisysCreateRecord");
                });

            modelBuilder.Entity("Labote.Core.Entities.AnalisysRecordDeviceValue", b =>
                {
                    b.HasOne("Labote.Core.Entities.AnalisysRecord", "AnalisysRecord")
                        .WithMany("AnalisysRecordDeviceValues")
                        .HasForeignKey("AnalisysRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.Device", null)
                        .WithMany("AnalisysRecordDeviceValues")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Labote.Core.Entities.DeviceResultValueType", "DeviceResultValueType")
                        .WithMany("AnalisysRecordDeviceValues")
                        .HasForeignKey("DeviceResultValueTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.SampleExamination", null)
                        .WithMany("AnalisysRecordDeviceValues")
                        .HasForeignKey("SampleExaminationId");

                    b.Navigation("AnalisysRecord");

                    b.Navigation("DeviceResultValueType");
                });

            modelBuilder.Entity("Labote.Core.Entities.AnalisysRecordSampleExaminationResultValue", b =>
                {
                    b.HasOne("Labote.Core.Entities.AnalisysRecord", "AnalisysRecord")
                        .WithMany("AnalisysRecordSampleExaminationResultValues")
                        .HasForeignKey("AnalisysRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.SampleExaminationResultValueType", "SampleExaminationResultValueType")
                        .WithMany("AnalisysRecordSampleExaminationResultValues")
                        .HasForeignKey("SampleExaminationResultValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalisysRecord");

                    b.Navigation("SampleExaminationResultValueType");
                });

            modelBuilder.Entity("Labote.Core.Entities.Chemical", b =>
                {
                    b.HasOne("Labote.Core.Entities.Laboratory", "Laboratory")
                        .WithMany("Chemicals")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Labote.Core.Entities.CurrentCustomerBankAccountInfo", b =>
                {
                    b.HasOne("Labote.Core.Entities.CurrentCustomer", "CurrentCustomer")
                        .WithMany("CurrentCustomerBankAccountInfos")
                        .HasForeignKey("CurrentCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentCustomer");
                });

            modelBuilder.Entity("Labote.Core.Entities.CurrentCustomerContactInfo", b =>
                {
                    b.HasOne("Labote.Core.Entities.CurrentCustomer", "CurrentCustomer")
                        .WithMany("CurrentCustomerContactInfos")
                        .HasForeignKey("CurrentCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentCustomer");
                });

            modelBuilder.Entity("Labote.Core.Entities.Device", b =>
                {
                    b.HasOne("Labote.Core.Entities.UserTopic", "UserTopic")
                        .WithMany("Devices")
                        .HasForeignKey("UserTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTopic");
                });

            modelBuilder.Entity("Labote.Core.Entities.DeviceResultValueSampleUnitReference", b =>
                {
                    b.HasOne("Labote.Core.Entities.Device", "Device")
                        .WithMany("DeviceResultValueSampleUnitReferences")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Labote.Core.Entities.DeviceResultValueType", b =>
                {
                    b.HasOne("Labote.Core.Entities.Device", "Device")
                        .WithMany("DeviceResultValueTypes")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Labote.Core.Entities.Laboratory", b =>
                {
                    b.HasOne("Labote.Core.Entities.UserTopic", "UserTopic")
                        .WithMany("Laboratories")
                        .HasForeignKey("UserTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTopic");
                });

            modelBuilder.Entity("Labote.Core.Entities.LaboratoryDevice", b =>
                {
                    b.HasOne("Labote.Core.Entities.Device", "Device")
                        .WithMany("LaboratoryDevices")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Labote.Core.Entities.Laboratory", "Laboratory")
                        .WithMany("LaboratoryDevice")
                        .HasForeignKey("LaboratoryId");

                    b.Navigation("Device");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Labote.Core.Entities.LaboratoryUser", b =>
                {
                    b.HasOne("Labote.Core.Entities.Laboratory", "Laboratory")
                        .WithMany("LaboratoryUsers")
                        .HasForeignKey("LaboratoryId");

                    b.HasOne("Labote.Core.Entities.LaboteUser", "LaboteUser")
                        .WithMany("LaboratoryUsers")
                        .HasForeignKey("LaboteUserId");

                    b.Navigation("Laboratory");

                    b.Navigation("LaboteUser");
                });

            modelBuilder.Entity("Labote.Core.Entities.LaboteUser", b =>
                {
                    b.HasOne("Labote.Core.Entities.UserTopic", "UserTopic")
                        .WithMany("LaboteUsers")
                        .HasForeignKey("UserTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTopic");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleAccept", b =>
                {
                    b.HasOne("Labote.Core.Entities.LaboteUser", "ConfirmToGetLaboratoryUser")
                        .WithMany("SampleAcceptForConfirms")
                        .HasForeignKey("ConfirmToGetLaboratoryUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Labote.Core.Entities.CurrentCustomer", "CurrentCustomer")
                        .WithMany("SampleAccepts")
                        .HasForeignKey("CurrentCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.Laboratory", "Laboratory")
                        .WithMany("SampleAccepts")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.LaboteUser", "LaboteUser")
                        .WithMany("SampleAccepts")
                        .HasForeignKey("LaboteUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmToGetLaboratoryUser");

                    b.Navigation("CurrentCustomer");

                    b.Navigation("Laboratory");

                    b.Navigation("LaboteUser");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExamination", b =>
                {
                    b.HasOne("Labote.Core.Entities.Laboratory", "Laboratory")
                        .WithMany("SampleExaminations")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.UserTopic", "UserTopic")
                        .WithMany("SampleExaminations")
                        .HasForeignKey("UserTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("UserTopic");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExaminationDevice", b =>
                {
                    b.HasOne("Labote.Core.Entities.Device", "Device")
                        .WithMany("SampleExaminationDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.SampleExamination", "SampleExamination")
                        .WithMany("SampleExaminationDevices")
                        .HasForeignKey("SampleExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("SampleExamination");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExaminationPriceCurrency", b =>
                {
                    b.HasOne("Labote.Core.Entities.SampleExamination", "SampleExamination")
                        .WithMany("SampleExaminationPriceCurrencies")
                        .HasForeignKey("SampleExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SampleExamination");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExaminationResultValueType", b =>
                {
                    b.HasOne("Labote.Core.Entities.SampleExamination", "SampleExamination")
                        .WithMany()
                        .HasForeignKey("SampleExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SampleExamination");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExaminationSampleAccept", b =>
                {
                    b.HasOne("Labote.Core.Entities.SampleAccept", "SampleAccept")
                        .WithMany("SampleExaminationSampleAccepts")
                        .HasForeignKey("SampleAcceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.SampleExamination", "SampleExamination")
                        .WithMany("SampleExaminationSampleAccepts")
                        .HasForeignKey("SampleExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SampleAccept");

                    b.Navigation("SampleExamination");
                });

            modelBuilder.Entity("Labote.Core.Entities.UserMenuModule", b =>
                {
                    b.HasOne("Labote.Core.Entities.MenuModule", "MenuModel")
                        .WithMany("UserMenuModules")
                        .HasForeignKey("MenuModelId");

                    b.HasOne("Labote.Core.Entities.UserRole", "UserRole")
                        .WithMany("UserMenuModules")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("MenuModel");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Labote.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Labote.Core.Entities.UserTopic", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserTopicId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Labote.Core.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Labote.Core.Entities.LaboteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Labote.Core.Entities.LaboteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Labote.Core.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labote.Core.Entities.LaboteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Labote.Core.Entities.LaboteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Labote.Core.Entities.AnalisysCreateRecord", b =>
                {
                    b.Navigation("AnalisysRecords");
                });

            modelBuilder.Entity("Labote.Core.Entities.AnalisysRecord", b =>
                {
                    b.Navigation("AnalisysRecordDeviceValues");

                    b.Navigation("AnalisysRecordSampleExaminationResultValues");
                });

            modelBuilder.Entity("Labote.Core.Entities.CurrentCustomer", b =>
                {
                    b.Navigation("CurrentCustomerBankAccountInfos");

                    b.Navigation("CurrentCustomerContactInfos");

                    b.Navigation("SampleAccepts");
                });

            modelBuilder.Entity("Labote.Core.Entities.Device", b =>
                {
                    b.Navigation("AnalisysRecordDeviceValues");

                    b.Navigation("DeviceResultValueSampleUnitReferences");

                    b.Navigation("DeviceResultValueTypes");

                    b.Navigation("LaboratoryDevices");

                    b.Navigation("SampleExaminationDevices");
                });

            modelBuilder.Entity("Labote.Core.Entities.DeviceResultValueType", b =>
                {
                    b.Navigation("AnalisysRecordDeviceValues");
                });

            modelBuilder.Entity("Labote.Core.Entities.Laboratory", b =>
                {
                    b.Navigation("Chemicals");

                    b.Navigation("LaboratoryDevice");

                    b.Navigation("LaboratoryUsers");

                    b.Navigation("SampleAccepts");

                    b.Navigation("SampleExaminations");
                });

            modelBuilder.Entity("Labote.Core.Entities.LaboteUser", b =>
                {
                    b.Navigation("AnalisysRecords");

                    b.Navigation("LaboratoryUsers");

                    b.Navigation("SampleAcceptForConfirms");

                    b.Navigation("SampleAccepts");
                });

            modelBuilder.Entity("Labote.Core.Entities.MenuModule", b =>
                {
                    b.Navigation("UserMenuModules");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleAccept", b =>
                {
                    b.Navigation("AnalisysCreateRecords");

                    b.Navigation("SampleExaminationSampleAccepts");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExamination", b =>
                {
                    b.Navigation("AnalisysRecordDeviceValues");

                    b.Navigation("SampleExaminationDevices");

                    b.Navigation("SampleExaminationPriceCurrencies");

                    b.Navigation("SampleExaminationSampleAccepts");
                });

            modelBuilder.Entity("Labote.Core.Entities.SampleExaminationResultValueType", b =>
                {
                    b.Navigation("AnalisysRecordSampleExaminationResultValues");
                });

            modelBuilder.Entity("Labote.Core.Entities.UserRole", b =>
                {
                    b.Navigation("UserMenuModules");
                });

            modelBuilder.Entity("Labote.Core.Entities.UserTopic", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Laboratories");

                    b.Navigation("LaboteUsers");

                    b.Navigation("SampleExaminations");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
